<!DOCTYPE html>
<html>
<head>
    <title>D3 Network Graph with Images</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@300;400&display=swap');

        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }
        svg {
            width: 100vw;
            height: 100vh;
            display: block;
        }
        .links line {
            stroke-opacity: 0.6;
            stroke-width: 4px;
            transition: all 0.3s;
        }
        .relationship-1 {
            stroke: #4CAF50;  /* Green for friendship */
        }
        .relationship-2 {
            stroke: #2196F3;  /* Blue for family */
        }
        .relationship-3 {
            stroke: #E91E63;  /* Pink for romantic */
        }
        .node-image {
            object-fit: cover;
            width: 160px;
            height: 160px;
        }
        .node-circle {
            fill: none;
            stroke: #808080;
            stroke-width: 2px;
            r: 80;
        }
        .node-label {
            font-family: 'Quicksand', sans-serif;
            font-weight: 500;
            font-size: 26px;
            fill: #333333;
            opacity: 0;
            transition: opacity 0.3s;
            paint-order: stroke fill;
            background: white;
            padding: 4px 8px;
            border-radius: 4px;
        }

        .node.highlighted .node-label {
            opacity: 1;  /* Show labels for highlighted nodes */
        }

        /* Add these styles */
        .links line {
            transition: all 0.3s;
            stroke-opacity: 0.2;  /* Reduced default opacity */
        }
        
        .node-circle {
            transition: all 0.3s;
            opacity: 1;
        }
        
        .node image {
            transition: all 0.3s;
            opacity: 1;
        }
        
        .node.faded .node-circle,
        .node.faded image {
            opacity: 0.2;
        }
        
        .links line.faded {
            stroke-opacity: 0.05;
        }
        
        .node.highlighted .node-circle {
            stroke-width: 3px;
        }
        
        .links line.highlighted {
            stroke-opacity: 0.8;
            stroke-width: 5px;
        }

        .node-label-background {
            fill: white;
            opacity: 0.95;
        }

        .node.highlighted .node-label-background {
            opacity: 0.9;
        }

        /* Update label styles */
        .node-label, .node-label-background {
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .label-group.visible .node-label,
        .label-group.visible .node-label-background {
            opacity: 1;
        }

        /* Add these styles after your existing styles */
        .search-container {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1000;
            width: 250px;
        }

        .search-input {
            width: 100%;
            padding: 8px 12px;
            font-size: 14px;
            border: 1px solid #ddd;
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            font-family: 'Quicksand', sans-serif;
            font-weight: 400;
            text-transform: uppercase;  /* Display text as uppercase */
        }

        .search-results {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 6px;
            margin-top: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            max-height: 200px;
            overflow-y: auto;
            display: none;
        }

        .search-result-item {
            padding: 8px 12px;
            cursor: pointer;
            font-family: 'Quicksand', sans-serif;
            font-weight: 400;
            font-size: 14px;
            text-transform: uppercase;  /* Display suggestions as uppercase */
        }

        .search-result-item:hover {
            background-color: #f5f5f5;
        }

        /* Add legend styles */
        .legend {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.9);
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            font-family: 'Quicksand', sans-serif;
            font-size: 13px;
            min-width: 220px;
            letter-spacing: 0.5px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin: 8px 0;
        }

        .legend-color {
            width: 30px;
            height: 4px;
            margin-right: 10px;
            border-radius: 2px;
        }

        /* Add CSS to ensure labels are above lines */
        .links {
            pointer-events: none;
            z-index: 1;
        }
        
        .label-group {
            pointer-events: none;
            z-index: 3;
        }

        .node-label {
            font-weight: 500;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 2px 6px;
            border-radius: 4px;
            text-shadow: 
                0px 0px 4px rgba(255, 255, 255, 0.9),
                0px 0px 8px rgba(255, 255, 255, 0.9);
        }

        /* Add CSS for search results */
        .search-result-item.selected {
            background-color: #f0f0f0;
        }
    </style>
</head>
<body>
    <div class="search-container">
        <input type="text" class="search-input" placeholder="IE&Scaron;KOK VEIK&#278;JO...">
        <div class="search-results"></div>
    </div>
    <svg></svg>
    <script>
        // Initialize all global variables first
        const width = window.innerWidth;
        const height = window.innerHeight;
        let nodes = [];
        let links = [];
        let node, link, labelGroups;
        let simulation;
        let validNodeNames = new Set();
        let drag; // Declare drag variable

        // SVG setup
        const svg = d3.select("svg")
            .attr("width", width)
            .attr("height", height);

        // Initialize zoom behavior
        const zoom = d3.zoom()
            .scaleExtent([0.1, 4])
            .on("zoom", zoomed);

        // Create container for zoom
        const container = svg.append("g");
        const labelContainer = container.append("g");

        // Apply zoom to SVG
        svg.call(zoom);

        function zoomed(event) {
            container.attr("transform", event.transform);
        }

        // Separate function for data processing
        function processData(pointsText, linksText) {
            const pointsLines = pointsText.split('\n').filter(line => line.trim());
            console.log("Number of points:", pointsLines.length);

            // Process nodes
            nodes = pointsLines.map(line => {
                const [name, image] = line.split('\t');
                validNodeNames.add(name);
                return { id: name, name: name, image: image };
            });

            // Process links
            const linksLines = linksText.split('\n').filter(line => line.trim());
            links = linksLines.map(line => {
                const [source, target, relationship, type] = line.split('\t');
                return { source, target, relationship, type };
            }).filter(link => {
                const isValid = validNodeNames.has(link.source) && validNodeNames.has(link.target);
                if (!isValid) {
                    console.warn('Skipping invalid link:', link);
                }
                return isValid;
            });

            // Initialize simulation
            simulation = d3.forceSimulation(nodes)
                .force("link", d3.forceLink(links)
                    .id(d => d.id)
                    .distance(500)
                    .strength(0.2))
                .force("charge", d3.forceManyBody()
                    .strength(-2000)
                    .distanceMin(200))
                .force("collision", d3.forceCollide()
                    .radius(150)
                    .strength(0.5))
                .alpha(0.7)
                .alphaDecay(0.002)
                .velocityDecay(0.2);

            // Initialize drag behavior after simulation exists
            drag = d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended);

            function dragstarted(event, d) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(event, d) {
                d.fx = event.x;
                d.fy = event.y;
            }

            function dragended(event, d) {
                if (!event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            console.log("Processed nodes:", nodes);
            console.log("Processed links:", links);
            
            // Create visualization elements here
            createVisualization();
        }

        function createVisualization() {
            // Create links
            link = container.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(links)
                .join("line")
                .attr("class", d => `relationship-${d.type}`);

            // Create nodes
            const nodeGroup = container.append("g")
                .attr("class", "nodes");

            // Create labels container first
            labelGroups = labelContainer.selectAll("g")
                .data(nodes)
                .join("g")
                .attr("class", "label-group");

            labelGroups.append("text")
                .attr("class", "node-label")
                .text(d => d.name)
                .attr("text-anchor", "middle")
                .attr("dy", "40");

            // Create nodes with updated event handlers
            node = nodeGroup
                .selectAll("g")
                .data(nodes)
                .join("g")
                .attr("class", "node")
                .on("mouseover", function(event, d) {
                    // Get connected nodes
                    const connectedNodes = new Set([d.id]);
                    links.forEach(link => {
                        if (link.source.id === d.id) connectedNodes.add(link.target.id);
                        if (link.target.id === d.id) connectedNodes.add(link.source.id);
                    });

                    // Update visibility
                    labelGroups.classed("visible", n => connectedNodes.has(n.id));
                    
                    // Update node and link highlighting
                    node.classed("highlighted", n => connectedNodes.has(n.id))
                        .classed("faded", n => !connectedNodes.has(n.id));
                    
                    link.classed("highlighted", l => l.source.id === d.id || l.target.id === d.id)
                        .classed("faded", l => l.source.id !== d.id && l.target.id !== d.id);
                })
                .on("mouseout", function() {
                    // Reset all states
                    labelGroups.classed("visible", false);
                    node.classed("highlighted", false)
                        .classed("faded", false);
                    link.classed("highlighted", false)
                        .classed("faded", false);
                });

            // Add images to nodes
            node.append("image")
                .attr("xlink:href", d => d.image)
                .attr("width", 160)
                .attr("height", 160)
                .attr("x", -80)
                .attr("y", -80)
                .attr("class", "node-image")
                .attr("preserveAspectRatio", "xMidYMid slice")
                .attr("clip-path", (d, i) => `url(#circle-clip-${i})`);

            // Add clip paths
            node.append("clipPath")
                .attr("id", (d, i) => `circle-clip-${i}`)
                .append("circle")
                .attr("r", 80);

            // Add border circles
            node.append("circle")
                .attr("r", 80)
                .attr("class", "node-circle");

            // Add drag behavior
            const drag = d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended);

            function dragstarted(event, d) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(event, d) {
                d.fx = event.x;
                d.fy = event.y;
            }

            function dragended(event, d) {
                if (!event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            // Apply drag behavior
            node.call(drag);

            // Update the simulation's tick handler
            simulation.on("tick", () => {
                link
                    .attr("x1", d => d.source.x)
                    .attr("y1", d => d.source.y)
                    .attr("x2", d => d.target.x)
                    .attr("y2", d => d.target.y);

                node
                    .attr("transform", d => `translate(${d.x},${d.y})`);

                // Update label positions
                labelGroups.attr("transform", d => {
                    const pos = calculateLabelPosition(d, nodes, []);
                    return `translate(${d.x + pos.x},${d.y + pos.y})`;
                });
            });

            // Update centerOnNode function to handle labels
            window.centerOnNode = function(d) {
                const connectedNodes = new Set();
                links.forEach(link => {
                    if (link.source.id === d.id) connectedNodes.add(link.target.id);
                    if (link.target.id === d.id) connectedNodes.add(link.source.id);
                });

                // Calculate bounding box of selected node and its connections
                let minX = d.x, maxX = d.x, minY = d.y, maxY = d.y;
                nodes.forEach(node => {
                    if (node.id === d.id || connectedNodes.has(node.id)) {
                        minX = Math.min(minX, node.x);
                        maxX = Math.max(maxX, node.x);
                        minY = Math.min(minY, node.y);
                        maxY = Math.max(maxY, node.y);
                    }
                });

                // Add padding
                const padding = 100;
                const centerX = (minX + maxX) / 2;
                const centerY = (minY + maxY) / 2;
                const scale = Math.min(
                    width / (maxX - minX + padding * 2),
                    height / (maxY - minY + padding * 2)
                );

                container.transition()
                    .duration(750)
                    .attr("transform", `translate(${width/2 - centerX * scale},${height/2 - centerY * scale})scale(${scale})`);

                highlightNodeAndConnections(d);
            }

            // Add search functionality
            const searchInput = document.querySelector('.search-input');
            const searchResults = document.querySelector('.search-results');
            let currentSuggestions = [];
            let selectedIndex = -1;

            searchInput.addEventListener('input', (e) => {
                const value = e.target.value.toLowerCase();
                if (!value) {
                    searchResults.style.display = 'none';
                    currentSuggestions = [];
                    selectedIndex = -1;
                    return;
                }

                currentSuggestions = nodes
                    .filter(node => node.name.toLowerCase().includes(value))
                    .slice(0, 5);

                if (currentSuggestions.length > 0) {
                    selectedIndex = -1;
                    renderSuggestions();
                    searchResults.style.display = 'block';
                } else {
                    searchResults.style.display = 'none';
                }
            });

            // Keyboard navigation
            searchInput.addEventListener('keydown', (e) => {
                console.log('Key pressed:', e.key, 'Current index:', selectedIndex);
                if (!currentSuggestions.length) return;

                switch(e.key) {
                    case 'ArrowDown':
                        e.preventDefault();
                        selectedIndex = selectedIndex < currentSuggestions.length - 1 ? selectedIndex + 1 : 0;
                        console.log('New index (down):', selectedIndex);
                        renderSuggestions();
                        highlightSelected();
                        break;
                    case 'ArrowUp':
                        e.preventDefault();
                        selectedIndex = selectedIndex > 0 ? selectedIndex - 1 : currentSuggestions.length - 1;
                        console.log('New index (up):', selectedIndex);
                        renderSuggestions();
                        highlightSelected();
                        break;
                    case 'Enter':
                        e.preventDefault();
                        if (selectedIndex >= 0) {
                            selectNode(currentSuggestions[selectedIndex]);
                        } else if (currentSuggestions.length > 0) {
                            selectNode(currentSuggestions[0]);
                        }
                        break;
                }
            });

            function highlightSelected() {
                const items = searchResults.querySelectorAll('.search-result-item');
                items.forEach((item, index) => {
                    if (index === selectedIndex) {
                        item.classList.add('selected');
                        item.scrollIntoView({ block: 'nearest' });
                    } else {
                        item.classList.remove('selected');
                    }
                });
            }

            function renderSuggestions() {
                searchResults.innerHTML = currentSuggestions
                    .map((node, index) => `
                        <div class="search-result-item${index === selectedIndex ? ' selected' : ''}"
                             data-index="${index}">
                            ${node.name}
                        </div>
                    `).join('');
            }

            // Mouse hover handler
            searchResults.addEventListener('mousemove', (e) => {
                if (e.target.classList.contains('search-result-item')) {
                    selectedIndex = parseInt(e.target.dataset.index);
                    renderSuggestions();
                }
            });

            // Click handler
            searchResults.addEventListener('mousedown', (e) => {
                if (e.target.classList.contains('search-result-item')) {
                    const selectedName = e.target.textContent.trim();
                    const selectedNode = nodes.find(n => n.name === selectedName);
                    if (selectedNode) {
                        selectNode(selectedNode);
                    }
                }
            });

            function selectNode(node) {
                // Highlight the node and its connections (including labels)
                highlightNodeAndConnections(node);
                
                // Center the view on the node
                centerOnNode(node);
                
                // Update search input and hide results
                searchInput.value = node.name;
                searchResults.style.display = 'none';
                selectedIndex = -1;
                
                // Clear the search input after a short delay
                setTimeout(() => {
                    searchInput.value = '';
                }, 1500); // 1.5 second delay
                
                // Ensure labels stay visible for selected node and its connections
                const connectedNodes = new Set();
                links.forEach(link => {
                    if (link.source.id === node.id) connectedNodes.add(link.target.id);
                    if (link.target.id === node.id) connectedNodes.add(link.source.id);
                });

                labelGroups
                    .classed("visible", n => n.id === node.id || connectedNodes.has(n.id));
            }

            // Handle blur event
            searchInput.addEventListener('blur', (e) => {
                setTimeout(() => {
                    searchResults.style.display = 'none';
                }, 200);
            });
        }

        // Node highlighting function
        function highlightNodeAndConnections(d) {
            const connectedNodes = new Set([d.id]);
            links.forEach(link => {
                if (link.source.id === d.id) connectedNodes.add(link.target.id);
                if (link.target.id === d.id) connectedNodes.add(link.source.id);
            });

            // Force label visibility
            labelGroups.each(function(n) {
                d3.select(this)
                    .classed("visible", connectedNodes.has(n.id))
                    .select(".node-label")
                    .style("opacity", connectedNodes.has(n.id) ? 1 : 0);
            });

            node.classed("highlighted", n => connectedNodes.has(n.id))
                .classed("faded", n => !connectedNodes.has(n.id));

            link.classed("highlighted", l => l.source.id === d.id || l.target.id === d.id)
                .classed("faded", l => l.source.id !== d.id && l.target.id !== d.id);
        }

        // Load and process data
        Promise.all([
            d3.text("Points.txt").then(text => {
                console.log("Loaded Points.txt:", text);
                return text;
            }),
            d3.text("Links.txt").then(text => {
                console.log("Loaded Links.txt:", text);
                return text;
            })
        ]).then(function([pointsText, linksText]) {
            processData(pointsText, linksText);
        }).catch(error => {
            console.error("Error loading or processing data:", error);
        });

        function centerOnNode(selectedNode) {
            console.log('Centering on node:', selectedNode);

            // First, find all connected nodes
            const connectedNodes = new Set([selectedNode]);
            links.forEach(link => {
                if (link.source.id === selectedNode.id) {
                    connectedNodes.add(link.target);
                } else if (link.target.id === selectedNode.id) {
                    connectedNodes.add(link.source);
                }
            });

            // Calculate the bounding box of selected node and its connections
            let minX = Infinity, maxX = -Infinity;
            let minY = Infinity, maxY = -Infinity;

            connectedNodes.forEach(node => {
                minX = Math.min(minX, node.x);
                maxX = Math.max(maxX, node.x);
                minY = Math.min(minY, node.y);
                maxY = Math.max(maxY, node.y);
            });

            // Add padding around the bounding box
            const padding = 50;
            minX -= padding;
            maxX += padding;
            minY -= padding;
            maxY += padding;

            // Calculate required scale to fit the bounding box
            const boxWidth = maxX - minX;
            const boxHeight = maxY - minY;
            const scale = Math.min(
                width / boxWidth,
                height / boxHeight,
                2  // Maximum zoom level
            );

            // Calculate center of the bounding box
            const centerX = (minX + maxX) / 2;
            const centerY = (minY + maxY) / 2;

            // Calculate translation to center the bounding box
            const x = width/2 - centerX * scale;
            const y = height/2 - centerY * scale;

            console.log('View transformation:', { x, y, scale });

            // Animate to the new view
            svg.transition()
                .duration(750)
                .call(zoom.transform, d3.zoomIdentity
                    .translate(x, y)
                    .scale(scale));
        }

        // Helper function to check if a label overlaps with a node
        function isOverlappingNode(labelX, labelY, nodes, labelWidth = 100, labelHeight = 20) {
            const nodeRadius = 50; // Node radius including border
            const safetyPadding = 5; // Extra padding for visual comfort
            
            return nodes.some(node => {
                // Check if any corner of the label rectangle is too close to the node center
                const corners = [
                    { x: labelX - labelWidth/2, y: labelY }, // Left middle
                    { x: labelX + labelWidth/2, y: labelY }, // Right middle
                    { x: labelX - labelWidth/2, y: labelY + labelHeight }, // Bottom left
                    { x: labelX + labelWidth/2, y: labelY + labelHeight }, // Bottom right
                    { x: labelX - labelWidth/2, y: labelY - labelHeight }, // Top left
                    { x: labelX + labelWidth/2, y: labelY - labelHeight }  // Top right
                ];
                
                return corners.some(corner => {
                    const dx = corner.x - node.x;
                    const dy = corner.y - node.y;
                    return Math.sqrt(dx * dx + dy * dy) < (nodeRadius + safetyPadding);
                });
            });
        }

        // Helper function to check if two labels overlap
        function doLabelsOverlap(rect1, rect2, padding = 5) {
            return !(rect1.x + rect1.width + padding < rect2.x || 
                    rect1.x > rect2.x + rect2.width + padding || 
                    rect1.y + rect1.height + padding < rect2.y || 
                    rect1.y > rect2.y + rect2.height + padding);
        }

        // Get label rectangle dimensions
        function getLabelRect(x, y, width = 100, height = 20) {
            return {
                x: x - width/2, // Center the label horizontally
                y: y,
                width: width,
                height: height
            };
        }

        // Simplified label positioning function
        function calculateLabelPosition(d, nodes, existingLabels) {
            const nodeRadius = 80;
            const labelHeight = 20;
            const verticalPadding = -5; // Changed to negative to move labels up
            
            // Start with position directly below node
            const basePosition = {
                x: 0,
                y: nodeRadius + verticalPadding
            };

            // If this position works, use it
            const labelX = d.x + basePosition.x;
            const labelY = d.y + basePosition.y;
            const newLabelRect = getLabelRect(labelX, labelY);

            // Check for overlaps with existing labels
            let hasOverlap = existingLabels.some(existing => 
                doLabelsOverlap(newLabelRect, existing)
            );

            if (!hasOverlap) {
                existingLabels.push(newLabelRect);
                return basePosition;
            }

            // If overlap, try slightly higher or lower positions
            for (let offset = -5; offset <= 5; offset += 5) { // Reduced range further
                if (offset === 0) continue;

                const testPos = {
                    x: basePosition.x,
                    y: basePosition.y + offset
                };

                const testX = d.x + testPos.x;
                const testY = d.y + testPos.y;
                const testRect = getLabelRect(testX, testY);

                hasOverlap = existingLabels.some(existing => 
                    doLabelsOverlap(testRect, existing)
                );

                if (!hasOverlap) {
                    existingLabels.push(testRect);
                    return testPos;
                }
            }

            // If all else fails, return a position slightly lower
            return {
                x: basePosition.x,
                y: basePosition.y + 5 // Reduced from 15 to 5
            };
        }

        // Update the CSS for labels
        const labelStyles = `
            .node-label {
                font-family: 'Quicksand', sans-serif;
                font-weight: 500;
                font-size: 26px;
                fill: #333333;
                opacity: 0;
                transition: opacity 0.3s;
                paint-order: stroke fill;
                background: white;
                padding: 4px 8px;
                border-radius: 4px;
            }
            
            .label-group.visible .node-label {
                opacity: 1 !important;
            }

            /* Ensure proper layering */
            .links {
                pointer-events: none;
                z-index: 1;
            }
            
            .nodes {
                z-index: 2;
            }
            
            .label-group {
                pointer-events: none;
                z-index: 3;
            }
        `;

        // Add the styles to the document
        const styleElement = document.createElement('style');
        styleElement.textContent = labelStyles;
        document.head.appendChild(styleElement);
    </script>
    <div class="legend">
        <div class="legend-item">
            <div class="legend-color" style="background: #4CAF50;"></div>
            <span>DRAUGAI IR PA&#381;&#302;STAMI</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background: #2196F3;"></div>
            <span>&#352;EIMA</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background: #E91E63;"></div>
            <span>ROMANTINIAI SANTYKIAI</span>
        </div>
    </div>
</body>
</html> 